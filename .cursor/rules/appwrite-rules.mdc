---
description: Guide testing Appwrite utility functions in SvelteKit with Vitest, emphasizing mocking client methods and using a central constants file for model IDs.
globs: src/lib/server/appwrite-utils/*.appwrite.ts, src/lib/server/appwrite-utils/*.test.ts
tags: [appwrite, svelte, testing, vitest, utils, constants]
priority: 3
version: 1.0.1
alwaysApply: false
---

# Appwrite SvelteKit Utility Function Testing Workflow

## Context

- This rule guides the process of writing unit tests for Appwrite utility functions (e.g., those in `src/lib/server/appwrite-utils/*.appwrite.ts`) within a SvelteKit project.
- It emphasizes using Vitest and `vi.fn()` for mocking the Appwrite client methods that these utilities call.
- Database and Collection IDs should be sourced from `src/lib/server/model.const.ts` (imported as `$lib/server/model.const.js`).
- **Import Convention**: For internal project imports (e.g., from `$lib/...` or relative paths like `./...`), append `.js` to the import path (e.g., `import { myFunction } from '$lib/utils/myUtils.js';`, `import { GET } from './+server.js';`).
- Apply this rule when creating or modifying unit tests for these Appwrite utility functions.

## Requirements

- Appwrite utility functions (e.g., `createRichTextPost`) are located in `src/lib/server/appwrite-utils/`. They accept an Appwrite service client (like `Databases`) as an argument.
- Test files reside in the same directory as the utility functions they test, with a `.test.ts` extension.
- **Mocking Appwrite Client Methods:**
    - The Appwrite service client instance (e.g., `Databases`) passed to utility functions should have its methods (e.g., `createDocument`, `getDocument`) mocked using `vi.fn()`. This allows asserting how the utility function interacts with the Appwrite SDK.
    - Clear all mocks before each test using `beforeEach(() => { vi.clearAllMocks(); });` for test isolation.
- **Database models and table constants:**
    - Appwrite specific constants like Database IDs and Collection IDs **must** be defined in `src/lib/server/model.const.ts`.
    - Utility functions (`*.appwrite.ts`) **must** import these constants from `$lib/server/model.const.js`.
    - Tests should import these constants from `$lib/server/model.const.js` for use in assertions if necessary, or use local constants that match the expected values from `model.const.ts`.
- **SvelteKit Environment Variables (`$env/static/private`):**
    - SvelteKit's `$env/static/private` should still be used for sensitive information like API keys or Appwrite project/endpoint details, but **not** for Database or Collection IDs.
    - If utility functions directly use other environment variables (e.g. API keys) from `$env/static/private`, those specific variables might still need mocking in tests using `vi.mock('$env/static/private', ...)`.
- **Assertions:**
    - Verify that the mocked Appwrite SDK methods (e.g., `mockDatabases.createDocument`) are called by the utility function with the correct parameters. These parameters will often include Database/Collection IDs which are now directly imported by the utility from `$lib/server/model.const.js`.
    - When asserting document IDs generated by Appwrite's `ID.unique()`, use `expect.any(String)`.
- **Shared Types:**
    - Define interfaces for data payloads and Appwrite client stubs. Export these from the utility file and import into tests using the `.js` extension (e.g., `from './example.appwrite.js'`).
- Ensure all linting and typing errors are resolved before running tests.

## Examples

<example description="Testing an Appwrite utility function that uses constants from `src/lib/server/model.const.ts`">

```typescript
// In src/lib/server/appwrite-utils/example.appwrite.test.ts
import { describe, it, expect, vi, beforeEach } from 'vitest';
import {
    createExampleDocument,
    type CreateExampleData,
    type AppwriteDatabasesClient
} from './example.appwrite.js'; // Note .js for internal import
import { DATABASE_ID, EXAMPLE_COLLECTION_ID } from '$lib/server/model.const.js'; // Import constants

// No need to mock $env/static/private for DATABASE_ID or EXAMPLE_COLLECTION_ID

const mockCreateDocumentMethod = vi.fn();
const mockDatabasesService = {
    createDocument: mockCreateDocumentMethod
} as unknown as AppwriteDatabasesClient;

describe('Appwrite Utility: createExampleDocument', () => {
    beforeEach(() => {
        vi.clearAllMocks();
        mockCreateDocumentMethod.mockResolvedValue({ $id: 'newDocId' });
    });

    it('should call databases.createDocument with correct constants and data', async () => {
        const exampleData: CreateExampleData = { name: 'Test Item', value: 100 };
        await createExampleDocument(mockDatabasesService, exampleData);

        expect(mockCreateDocumentMethod).toHaveBeenCalledOnce();
        expect(mockCreateDocumentMethod).toHaveBeenCalledWith(
            DATABASE_ID, // Actual constant imported
            EXAMPLE_COLLECTION_ID, // Actual constant imported
            expect.any(String),
            exampleData
        );
    });
});
```

</example>

<example description="Corresponding utility implementation in `example.appwrite.ts` using `src/lib/server/model.const.ts`.">

```typescript
// In src/lib/server/appwrite-utils/example.appwrite.ts
import { ID } from 'appwrite';
import type { Models } from 'appwrite';
// Import constants from the new location
import { DATABASE_ID, EXAMPLE_COLLECTION_ID } from '$lib/server/model.const.js'; // Note .js

export interface CreateExampleData {
    name: string;
    value: number;
}
export interface AppwriteDatabasesClient {
    createDocument: (
        databaseId: string,
        collectionId: string,
        documentId: string,
        data: object
    ) => Promise<Models.Document>;
}

export async function createExampleDocument(
    databases: AppwriteDatabasesClient,
    data: CreateExampleData
): Promise<Models.Document> {
    try {
        // Use the imported constants directly
        const document = await databases.createDocument(
            DATABASE_ID,
            EXAMPLE_COLLECTION_ID,
            ID.unique(),
            data
        );
        return document;
    } catch (error) {
        console.error('Error creating example document:', error);
        throw error;
    }
}
```

</example>
