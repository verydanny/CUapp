---
description: Guide testing Appwrite utility functions in SvelteKit with Vitest, emphasizing mocking Appwrite client methods and SvelteKit environment variables.
globs: src/lib/server/appwrite-utils/*.appwrite.ts, src/lib/server/appwrite-utils/*.appwrite.test.ts
tags: [svelte, sveltekit, appwrite, testing, vitest, mock, env]
priority: 3
version: 1.2.0 # Updated version
alwaysApply: false
---

# Appwrite SvelteKit Utility Function Testing Workflow

## Context

- This rule guides the process of writing unit tests for Appwrite utility functions (e.g., those in `src/lib/server/appwrite-utils/*.appwrite.ts`) within a SvelteKit project.
- It emphasizes using Vitest and `vi.fn()` for mocking the Appwrite client methods that these utilities call, and `vi.mock()` for mocking `$env/static/private` if the utilities use environment variables directly (e.g., for Database or Collection IDs).
- **Import Convention**: For internal project imports (e.g., from `$lib/...` or relative paths like `./...`), append `.js` to the import path (e.g., `import { myFunction } from '$lib/utils/myUtils.js';`, `import { GET } from './+server.js';`).
- Apply this rule when creating or modifying unit tests for these Appwrite utility functions.

## Requirements

- Appwrite utility functions (e.g., `createRichTextPost`) are located in `src/lib/server/appwrite-utils/`. They accept an Appwrite service client (like `Databases`) as an argument.
- Test files reside in the same directory as the utility functions they test, with a `.test.ts` extension.
- **Mocking Appwrite Client Methods:**
    - The Appwrite service client instance (e.g., `Databases`) passed to utility functions should have its methods (e.g., `createDocument`, `getDocument`) mocked using `vi.fn()`. This allows asserting how the utility function interacts with the Appwrite SDK.
    - Clear all mocks before each test using `beforeEach(() => { vi.clearAllMocks(); });` for test isolation.
- **Mocking SvelteKit Environment Variables (`$env/static/private`) for Utilities:**
    - If your Appwrite utility functions _directly import_ configuration constants (like specific Database IDs or Collection IDs) from `$env/static/private`, these imports **must** be mocked in the test files for those utilities.
    - Use `vi.mock('$env/static/private', ...)` to provide mock values for these imported constants. This mock should be at the top level of your test file.
    - Test files should define their own constants for these IDs, and the mock ensures the utility implementation uses these test-defined constants.
- **Assertions:**
    - Verify that the mocked Appwrite SDK methods (e.g., `mockDatabases.createDocument`) are called by the utility function with the correct parameters. These parameters will often include Database/Collection IDs which, if imported by the utility from `$env/static/private`, will correspond to the values supplied in the `vi.mock('$env/static/private', ...)` setup.
    - When asserting document IDs generated by Appwrite's `ID.unique()`, use `expect.any(String)`.
- **Constants in Tests:**
    - Define constants for Appwrite database IDs and collection IDs directly within test files. These are used for assertions and to supply values for the `$env/static/private` mock.
- **Implementation Files (`*.appwrite.ts` Utilities):**
    - These utility files **must** source their Appwrite configuration constants (Database ID, Collection IDs) from `$env/static/private` as per `appwrite-rules.mdc` if they need to reference them directly.
- **Shared Types:**
    - Define interfaces for data payloads and Appwrite client stubs. Export these from the utility file and import into tests using the `.js` extension (e.g., `from './example.appwrite.js'`).
- Ensure all linting and typing errors are resolved before running tests.

## Examples

<example description="Mocking Appwrite client methods and `$env/static/private` in a utility function's test.">

```typescript
// In src/lib/server/appwrite-utils/example.appwrite.test.ts
import { describe, it, expect, vi, beforeEach } from 'vitest';
import {
    createExampleDocument,
    type CreateExampleData,
    type AppwriteDatabasesClient
} from './example.appwrite.js'; // Note .js for internal import

// ---- Critical: Mock $env/static/private if example.appwrite.ts uses it ----
const MOCK_ENV_APPWRITE_DB_ID = 'test_db_id_from_env_mock';
const MOCK_ENV_EXAMPLE_COLLECTION_ID = 'test_coll_id_from_env_mock';

vi.mock('$env/static/private', () => ({
    // $env/static/private does not take .js
    APPWRITE_DATABASE_ID: MOCK_ENV_APPWRITE_DB_ID,
    EXAMPLE_COLLECTION_ID: MOCK_ENV_EXAMPLE_COLLECTION_ID
}));
// ---- End Mock ----

const mockCreateDocumentMethod = vi.fn();
const mockDatabasesService = {
    createDocument: mockCreateDocumentMethod
} as unknown as AppwriteDatabasesClient;

describe('Appwrite Utility: createExampleDocument', () => {
    beforeEach(() => {
        vi.clearAllMocks();
        mockCreateDocumentMethod.mockResolvedValue({ $id: 'newDocId' });
    });

    it('should call databases.createDocument with correct env-sourced IDs and data', async () => {
        const exampleData: CreateExampleData = { name: 'Test Item', value: 100 };
        await createExampleDocument(mockDatabasesService, exampleData);

        expect(mockCreateDocumentMethod).toHaveBeenCalledOnce();
        expect(mockCreateDocumentMethod).toHaveBeenCalledWith(
            MOCK_ENV_APPWRITE_DB_ID,
            MOCK_ENV_EXAMPLE_COLLECTION_ID,
            expect.any(String),
            exampleData
        );
    });
});
```

</example>

<example description="Corresponding utility implementation in `example.appwrite.ts` using `$env/static/private` (no changes needed here for `.js` on $env imports).">

```typescript
// In src/lib/server/appwrite-utils/example.appwrite.ts
import { ID } from 'appwrite';
import type { Models } from 'appwrite';
import { APPWRITE_DATABASE_ID, EXAMPLE_COLLECTION_ID } from '$env/static/private'; // $env imports are special

export interface CreateExampleData {
    name: string;
    value: number;
}
export interface AppwriteDatabasesClient {
    createDocument: (
        databaseId: string,
        collectionId: string,
        documentId: string,
        data: object
    ) => Promise<Models.Document>;
}

export async function createExampleDocument(
    databases: AppwriteDatabasesClient,
    data: CreateExampleData
): Promise<Models.Document> {
    try {
        const document = await databases.createDocument(
            APPWRITE_DATABASE_ID,
            EXAMPLE_COLLECTION_ID,
            ID.unique(),
            data
        );
        return document;
    } catch (error) {
        console.error('Error creating example document:', error);
        throw error;
    }
}
```

</example>
