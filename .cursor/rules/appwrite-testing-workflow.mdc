---
description: Guide testing of Appwrite interactions in SvelteKit using Vitest, mocks, and correct environment variable handling, including .js import convention.
globs: src/lib/server/appwrite-utils/*.appwrite.ts, src/lib/server/appwrite-utils/*.appwrite.test.ts
tags: [svelte, sveltekit, appwrite, testing, vitest, mock, env]
priority: 2
version: 1.2.0 # Updated version
alwaysApply: false
---

# Appwrite SvelteKit Testing Workflow

## Context

- This rule guides the process of writing unit tests for functions that interact with Appwrite services within a SvelteKit project, particularly using Vitest and `vi.fn()` for mocking.
- **Import Convention**: For internal project imports (e.g., from `$lib/...` or relative paths like `./...`), append `.js` to the import path (e.g., `import { myFunction } from '$lib/utils/myUtils.js';`, `import { GET } from './+server.js';`).
- Apply this rule when creating or modifying tests for Appwrite utility functions located in `src/lib/server/appwrite-utils/`.

## Requirements

- Place Appwrite interaction utility functions in `src/lib/server/appwrite-utils/`.
- Test files should reside in the same directory as the functions they test, with a `.test.ts` extension.
- **Mocking Appwrite Client:**
    - Mock the Appwrite client (e.g., `Databases`) and its methods (e.g., `createDocument`, `getDocument`) using `vi.fn()`.
    - Clear all mocks before each test using `beforeEach(() => { vi.clearAllMocks(); });` to ensure test isolation.
- **Mocking SvelteKit Environment Variables (`$env/static/private`):**
    - If your Appwrite utility functions import configuration (like Database ID, Collection IDs) from `$env/static/private`, these imports **must** be mocked in your test files.
    - Use `vi.mock('$env/static/private', ...)` to provide mock values for the imported constants. This mock should be placed at the top level of your test file, outside of any `describe` or `beforeEach` blocks.
    - Test files typically define their own constants for IDs, and the mock ensures that the implementation uses these test-defined constants via the mocked import.
- **Assertions:**
    - Verify that Appwrite SDK methods are called with the correct parameters (e.g., database ID, collection ID, data payload), which should match the constants defined or mocked in the test.
    - When asserting document IDs generated by Appwrite's `ID.unique()`, use `expect.any(String)` in the assertion.
- **Constants in Tests:**
    - Define constants for Appwrite database IDs and collection IDs directly within test files for clarity and to ensure assertions match expected values used by the mocked environment variables.
- **Implementation Files (`*.appwrite.ts`):**
    - These files **must** source their Appwrite configuration constants (Database ID, Collection IDs, API Keys, etc.) from `$env/static/private` as per `appwrite-rules.mdc`. Direct use of `process.env` is forbidden.
- **Shared Types:**
    - Define interfaces for data payloads (e.g., data for creating a document) and Appwrite client stubs. Export these types from the `.appwrite.ts` utility file and import them into test files (using `.js` extension, e.g. `from './example.appwrite.js'`) to avoid redefinition.
- Ensure all linting and typing errors are resolved before running tests.

## Examples

<example description="Mocking Appwrite client and `$env/static/private` in a test.">

```typescript
// In src/lib/server/appwrite-utils/example.appwrite.test.ts
import { describe, it, expect, vi, beforeEach } from 'vitest';
import {
    createExampleDocument,
    type CreateExampleData,
    type AppwriteDatabasesClient
} from './example.appwrite.js'; // Note .js for internal import

// ---- Critical: Mock $env/static/private ----
const MOCK_APPWRITE_DB_ID = 'test_db_id_from_mock';
const MOCK_EXAMPLE_COLLECTION_ID = 'test_collection_id_from_mock';

vi.mock('$env/static/private', () => {
    // $env/static/private does not take .js
    return {
        DATABASE_ID: MOCK_APPWRITE_DB_ID,
        EXAMPLE_COLLECTION_ID: MOCK_EXAMPLE_COLLECTION_ID
    };
});
// ---- End Mock ----

const mockCreateDocument = vi.fn();
const mockDatabases = {
    createDocument: mockCreateDocument
} as unknown as AppwriteDatabasesClient;

describe('Appwrite: Example Document Creation with Env Mocking', () => {
    beforeEach(() => {
        vi.clearAllMocks();
        mockCreateDocument.mockResolvedValue({ $id: 'newDocId' });
    });

    it('should call createDocument with correct parameters (using mocked env vars)', async () => {
        const exampleData: CreateExampleData = { name: 'Test Item', value: 100 };
        await createExampleDocument(mockDatabases, exampleData);

        expect(mockCreateDocument).toHaveBeenCalledOnce();
        expect(mockCreateDocument).toHaveBeenCalledWith(
            MOCK_APPWRITE_DB_ID,
            MOCK_EXAMPLE_COLLECTION_ID,
            expect.any(String),
            exampleData
        );
    });
});
```

</example>

<example description="Corresponding implementation in `example.appwrite.ts` using `$env/static/private` (no changes needed here for `.js` on $env imports).">

```typescript
// In src/lib/server/appwrite-utils/example.appwrite.ts
import { ID } from 'appwrite';
import type { Models } from 'appwrite';
import { DATABASE_ID, EXAMPLE_COLLECTION_ID } from '$env/static/private'; // $env imports are special

export interface CreateExampleData {
    /* ... */
}
export interface AppwriteDatabasesClient {
    createDocument: (
        databaseId: string,
        collectionId: string,
        documentId: string,
        data: object
    ) => Promise<Models.Document>;
}

export async function createExampleDocument(
    databases: AppwriteDatabasesClient,
    data: CreateExampleData
): Promise<Models.Document> {
    try {
        const document = await databases.createDocument(
            DATABASE_ID,
            EXAMPLE_COLLECTION_ID,
            ID.unique(),
            data
        );
        return document;
    } catch (error) {
        console.error('Error creating example document:', error);
        throw error;
    }
}
```

</example>

<example type="invalid" description="Test file NOT mocking `$env/static/private` when the implementation uses it.">

```typescript
// In test file:
// Missing: vi.mock('$env/static/private', ...);

// Implementation file (example.appwrite.ts) uses:
// import { DATABASE_ID } from '$env/static/private';

// This test would likely fail or behave unpredictably because DATABASE_ID
// in example.appwrite.ts would be undefined or its actual value from .env,
// not a controlled test value.
```

</example>
