---
description: Guide testing Appwrite utility functions in SvelteKit with Vitest, ensuring use of model constants and correct mocking strategies.
globs: src/lib/server/appwrite-utils/**/*.test.ts
tags: [appwrite, sveltekit, testing, vitest, constants, mock]
priority: 2
version: 1.0.2
alwaysApply: false
---

# Appwrite SvelteKit Testing Workflow

## Context

- This rule guides the process of writing unit tests for functions that interact with Appwrite services within a SvelteKit project, particularly using Vitest and `vi.fn()` for mocking.
- Appwrite Database and Collection IDs should be sourced from `src/lib/server/model.const.ts` (imported as `$lib/server/model.const.js`).
- **Import Convention**: For internal project imports (e.g., from `$lib/...` or relative paths like `./...`), append `.js` to the import path (e.g., `import { myFunction } from '$lib/utils/myUtils.js';`, `import { GET } from './+server.js';`).
- Apply this rule when creating or modifying tests for Appwrite utility functions located in `src/lib/server/appwrite-utils/`.

## Requirements

- Place Appwrite interaction utility functions in `src/lib/server/appwrite-utils/`.
- Test files should reside in the same directory as the functions they test, with a `.test.ts` extension.
- **Mocking Appwrite Client:**
    - Mock the Appwrite client (e.g., `Databases`) and its methods (e.g., `createDocument`, `getDocument`) using `vi.fn()`.
    - Clear all mocks before each test using `beforeEach(() => { vi.clearAllMocks(); });` to ensure test isolation.
- **Appwrite Model Constants (Database ID, Collection IDs):**
    - Utility functions (`*.appwrite.ts`) **must** import these constants from `$lib/server/model.const.js`.
    - Tests should also import these constants from `$lib/server/model.const.js` if needed for assertions, or define local constants that match the expected values from `model.const.ts`.
    - There is no need to mock `$env/static/private` for these specific constants.
- **Other SvelteKit Environment Variables (`$env/static/private`):**
    - If your Appwrite utility functions import other configuration (like API keys) from `$env/static/private`, these specific imports **must** be mocked in your test files using `vi.mock('$env/static/private', ...)`.
- **Assertions:**
    - Verify that Appwrite SDK methods are called with the correct parameters (e.g., database ID, collection ID, data payload), which should match the constants imported from `$lib/server/model.const.js`.
    - When asserting document IDs generated by Appwrite's `ID.unique()`, use `expect.any(String)` in the assertion.
- **Implementation Files (`*.appwrite.ts`):**
    - These files **must** source their Appwrite Database and Collection IDs from `$lib/server/model.const.js`. Other configurations like API keys, Project ID etc., should still come from `$env/static/private`. Direct use of `process.env` is forbidden.
- **Shared Types:**
    - Define interfaces for data payloads (e.g., data for creating a document) and Appwrite client stubs. Export these types from the `.appwrite.ts` utility file and import them into test files (using `.js` extension, e.g. `from './example.appwrite.js'`) to avoid redefinition.
- Ensure all linting and typing errors are resolved before running tests.

## Examples

<example description="Mocking Appwrite client and using constants from 'src/lib/server/model.const.ts' in a test.">

```typescript
// In src/lib/server/appwrite-utils/example.appwrite.test.ts
import { describe, it, expect, vi, beforeEach } from 'vitest';
import {
    createExampleDocument,
    type CreateExampleData,
    type AppwriteDatabasesClient
} from './example.appwrite.js'; // Note .js for internal import
// Import constants for use in assertions if needed, or rely on the implementation's import
import {
    DATABASE_ID as EXPECTED_DATABASE_ID,
    EXAMPLE_COLLECTION_ID as EXPECTED_EXAMPLE_COLLECTION_ID
} from '$lib/server/model.const.js';

// No vi.mock for $env/static/private for these constants

const mockCreateDocument = vi.fn();
const mockDatabases = {
    createDocument: mockCreateDocument
} as unknown as AppwriteDatabasesClient;

describe('Appwrite: Example Document Creation with Central Constants', () => {
    beforeEach(() => {
        vi.clearAllMocks();
        mockCreateDocument.mockResolvedValue({ $id: 'newDocId' });
    });

    it('should call createDocument with correct parameters (using imported constants)', async () => {
        const exampleData: CreateExampleData = { name: 'Test Item', value: 100 };
        await createExampleDocument(mockDatabases, exampleData);

        expect(mockCreateDocument).toHaveBeenCalledOnce();
        expect(mockCreateDocument).toHaveBeenCalledWith(
            EXPECTED_DATABASE_ID,
            EXPECTED_EXAMPLE_COLLECTION_ID,
            expect.any(String),
            exampleData
        );
    });
});
```

</example>

<example description="Corresponding implementation in 'example.appwrite.ts' using constants from 'src/lib/server/model.const.ts'.">

```typescript
// In src/lib/server/appwrite-utils/example.appwrite.ts
import { ID } from 'appwrite';
import type { Models } from 'appwrite';
// Import constants from the new central location
import { DATABASE_ID, EXAMPLE_COLLECTION_ID } from '$lib/server/model.const.js'; // Note .js

export interface CreateExampleData {
    name: string;
    value: number;
}
export interface AppwriteDatabasesClient {
    createDocument: (
        databaseId: string,
        collectionId: string,
        documentId: string,
        data: object
    ) => Promise<Models.Document>;
}

export async function createExampleDocument(
    databases: AppwriteDatabasesClient,
    data: CreateExampleData
): Promise<Models.Document> {
    try {
        // Use the imported constants
        const document = await databases.createDocument(
            DATABASE_ID,
            EXAMPLE_COLLECTION_ID,
            ID.unique(),
            data
        );
        return document;
    } catch (error) {
        console.error('Error creating example document:', error);
        throw error;
    }
}
```

</example>

<example type="invalid" description="Test file incorrectly mocking '$env/static/private' for constants now in 'model.const.ts'.">

```typescript
// In test file:
// Incorrect:

vi.mock('$env/static/private', () => ({
    DATABASE_ID: 'some_test_db_id',
    EXAMPLE_COLLECTION_ID: 'some_test_collection_id'
}));

// This mock is no longer needed for these constants if example.appwrite.ts imports them from model.const.js

// Implementation file (example.appwrite.ts) now uses:
import { DATABASE_ID, EXAMPLE_COLLECTION_ID } from '$lib/server/model.const.js';

// This test setup would be misleading as the implementation no longer sources these specific IDs from $env.
```

</example>
