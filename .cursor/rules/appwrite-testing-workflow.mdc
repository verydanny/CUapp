---
description: Guide testing of Appwrite interactions using Vitest and mocks
globs: src/lib/server/appwrite-utils/**/*.test.ts
tags: [testing, appwrite, vitest, mock]
priority: 4
version: 1.0.0
---

# Appwrite Testing Workflow

## Context

- This rule guides the process of writing unit tests for functions that interact with Appwrite services, particularly using Vitest and `vi.fn()` for mocking.
- Apply this rule when creating or modifying tests for Appwrite utility functions located in `src/lib/server/appwrite-utils/`.

## Requirements

- Place Appwrite interaction utility functions in `src/lib/server/appwrite-utils/`.
- Test files should reside in the same directory structure as the functions they test.
- **Mocking:**
    - Mock the Appwrite client (e.g., `Databases`) and its methods (e.g., `createDocument`, `getDocument`) using `vi.fn()`.
    - Clear all mocks before each test using `beforeEach(() => { vi.clearAllMocks(); });` to ensure test isolation.
- **Assertions:**
    - Verify that Appwrite SDK methods are called with the correct parameters (e.g., database ID, collection ID, data payload).
    - When asserting document IDs generated by Appwrite's `ID.unique()`, use `expect.any(String)` in the assertion.
- **Constants:**
    - Use constants for Appwrite database IDs and collection IDs within test files for clarity.
    - In implementation files (`*.appwrite.ts`), these constants should ideally be sourced from environment variables or a central configuration.
- **Shared Types:**
    - Define interfaces for data payloads (e.g., data for creating a document) and Appwrite client stubs. Export these types from the `.appwrite.ts` utility file and import them into test files to avoid redefinition.
- Ensure all linting and typing errors are resolved before running tests.

## Examples

<example>
  description: Mocking Appwrite databases.createDocument and testing a create function
  ```typescript
// In src/lib/server/appwrite-utils/example.appwrite.test.ts
import { describe, it, expect, vi, beforeEach } from 'vitest';
// Assuming ID is used in the implementation, not necessarily in the test assertion directly
// import { ID } from 'appwrite'; 
import { 
    createExampleDocument, 
    type CreateExampleData,
    type AppwriteDatabasesClient // Assuming this type is exported from example.appwrite.ts
} from './example.appwrite';

const APPWRITE_DB_ID = 'your_db_id';
const EXAMPLE_COLLECTION_ID = 'example_collection';

// Mock Appwrite Databases client
const mockCreateDocument = vi.fn();
// Cast to AppwriteDatabasesClient for type safety if the mock is partial
const mockDatabases = {
createDocument: mockCreateDocument
} as unknown as AppwriteDatabasesClient;

describe('Appwrite: Example Document Creation', () => {
beforeEach(() => {
vi.clearAllMocks();
});

    it('should call createDocument with correct parameters', async () => {
        const exampleData: CreateExampleData = { name: 'Test Item', value: 100 };

        // Mock the createDocument call to resolve with a document-like structure
        mockCreateDocument.mockResolvedValue({ $id: 'newDocId', ...exampleData });

        await createExampleDocument(mockDatabases, exampleData);

        expect(mockCreateDocument).toHaveBeenCalledOnce();
        expect(mockCreateDocument).toHaveBeenCalledWith(
            APPWRITE_DB_ID,
            EXAMPLE_COLLECTION_ID,
            expect.any(String), // For ID.unique()
            exampleData
        );
    });

});

````
</example>

<example>
description: Corresponding implementation in example.appwrite.ts
```typescript
// In src/lib/server/appwrite-utils/example.appwrite.ts
import { ID } from 'appwrite';

// Typically, Appwrite client (databases) would be initialized and passed here,
// or this function would be part of a class that has access to it.

export interface CreateExampleData {
name: string;
value: number;
}

// A minimal type for what the createExampleDocument function expects from an Appwrite DB client
export interface AppwriteDatabasesClient {
  createDocument: (
      databaseId: string,
      collectionId: string,
      documentId: string,
      data: object
  ) => Promise<object>; // Use more specific Appwrite types if available
}

const APPWRITE_DB_ID = process.env.APPWRITE_DB_ID || 'your_db_id';
const EXAMPLE_COLLECTION_ID = process.env.EXAMPLE_COLLECTION_ID || 'example_collection';

export async function createExampleDocument(
  databases: AppwriteDatabasesClient,
  data: CreateExampleData
): Promise<object> {
  try {
      const document = await databases.createDocument(
          APPWRITE_DB_ID,
          EXAMPLE_COLLECTION_ID,
          ID.unique(),
          data
      );
      return document;
  } catch (error) {
      console.error("Error creating example document:", error);
      throw error;
  }
}
````

</example>

<example type="invalid">
  description: Test not using expect.any(String) for ID.unique()
  ```typescript
// ...
        expect(mockCreateDocument).toHaveBeenCalledWith(
            APPWRITE_DB_ID,
            EXAMPLE_COLLECTION_ID,
            'some-hardcoded-id', // Incorrect if ID.unique() is used
            exampleData
        );
// ...
  ```
</example>
