---
description: Enforce Svelte 5 runes best practices and SvelteKit environment variable usage for clarity, performance, and correctness.
globs: **/*.svelte
tags: [svelte, runes, state-management, best-practices, sveltekit, environment-variables]
priority: 2
version: 1.1.0
alwaysApply: false
---

# Svelte 5 Runes and SvelteKit Environment Variable Standards

## Context

- This rule defines best practices for using Svelte 5 runes (`$state`, `$props`, `$derived`, `$effect`, etc.) and SvelteKit environment variables to ensure code clarity, maintainability, performance, and correctness across the project.
- Apply this rule when writing or reviewing any Svelte component files (`.svelte`).

## Requirements

### 1. Project Configuration

- If the project uses `compilerOptions: { runes: true }` in `svelte.config.js` (global runes mode):
    - Props **must** be declared using `$props()`.
    - `export let` for props is **disallowed**.
    - `<svelte:options runes={false} />` **cannot** be used to opt-out individual components.

### 2. Props Declaration

- Always use `const { /* prop names */ }: <PropType> = $props();` for prop declaration.
- Provide clear TypeScript types for props, adhering to `typescript-typing-standards.mdc`. Avoid `any` where possible.

### 3. Local Reactive State

- Use `let myValue = $state(initialValue);` for component-level mutable state that should trigger reactivity.

### 4. Derived State (`$derived` and `$derived.by()`)

- **Simple Expressions:** For straightforward, single-expression derivations, `$derived(expression)` is acceptable.
    - Example: `let double = $derived(count * 2);`
    - The expression must be free of side-effects. State changes (e.g., `count++`) are disallowed directly within `$derived(expression)`.
- **Complex Derivations (CRITICAL):** For any derived state that requires multiple statements, conditional logic (`if/else`, `switch`), loops, or calls to helper functions to compute its value, **MUST use `$derived.by(() => { ... });`**.

    - This provides a more robust execution context for the Svelte compiler.
    - Example:

        ```typescript
        // Assume someState and otherState are $state variables
        // Assume computeA and computeB are well-typed functions
        let complexValue = $derived.by(() => {
            if (someCondition) {
                // someCondition could be derived from props or state
                return computeA(someState);
            } else {
                let temp = computeB(otherState);
                return temp + 10;
            }
        });
        ```

### 5. Side Effects (`$effect()`)

- Use `$effect(() => { ... });` for code with side effects reacting to state changes (DOM manipulation, logging, data fetching, event listener setup/teardown).
- Effects run _after_ DOM updates. Return a cleanup function if needed: `$effect(() => { /* setup */; return () => { /* cleanup */ }; });`
- Use `$effect.pre()` for effects that must run _before_ DOM updates.

### 6. Event Handlers

- Event handlers in Svelte 5 (when runes are enabled) should use the lowercase, colon-less syntax.
    - **Correct:** `onclick={handler}`, `onmousedown={handler}`
    - **Incorrect (Legacy):** `on:click={handler}`, `on:mousedown={handler}`
- Ensure handler functions are well-typed.

### 7. Commenting

- **Script Block (`<script>` tag):**
    - Use JSDoc-style comments (`/** ... */`) for documenting functions, interfaces, types, and complex logic blocks.
    - Use single-line comments (`// ...`) for short explanations on their own dedicated line(s).
    - Inline comments (`// comment after code`) should be used sparingly and only for very brief annotations.
- **Template/Markup (`.svelte` file outside script tag):**
    - Use HTML-style comments (`<!-- ... -->`).
    - **Disallowed:** Avoid Svelte-specific block comments like `{/* ... */}` as they can be confused with Svelte logic blocks and are not standard HTML comments.

### 8. SvelteKit Environment Variables (Client-Side)

- When accessing environment variables in Svelte components (client-side code):

    - **No `process.env`:** Direct usage of `process.env` is **forbidden**.
    - **Public Environment Variables Only:** Components can only access _public_ environment variables.

        - These variables **must** be prefixed with `PUBLIC_` in your `.env` file (e.g., `PUBLIC_FEATURE_FLAG="true"`).
        - Import them using SvelteKit's public static environment module:

            ```typescript
            import { PUBLIC_FEATURE_FLAG, PUBLIC_API_ENDPOINT } from '$env/static/public';
            ```

    - I will instruct the user to ensure these `PUBLIC_` prefixed variables are correctly defined in their `.env` file.
    - For _private_ environment variables (secrets, API keys for server use), these **must not** be imported or used in client-side Svelte components. They should be handled by server-side code (e.g., API routes, server hooks) which import from `$env/static/private`.

### 9. Dependency Tracking

- Svelte automatically tracks dependencies read synchronously within `$derived` or `$effect`.
- Use `$untrack(value)` to read a reactive value without establishing it as a dependency.

### 10. Reactivity with Proxies (Caution)

- When iterating over or performing complex operations on reactive arrays/objects (from `$state` or `$props`) within reactive computations (`$derived`, `$derived.by`, `$effect`):
    - If encountering unexpected behavior or performance issues, consider creating a shallow, non-proxied copy for the operation: `const localArray = [...reactiveArray];`. This is a fallback, as direct use of proxies is generally expected to work.

### 11. Debugging Runes

- Utilize `$inspect(...).with(label)` for reactive debugging in the console. Prefer this over manual `console.log` in `$effect` for observing state changes during development.
- Use `$state.snapshot(value)` to get a plain, non-proxied version of reactive state for logging or comparison.

## Examples

<example description="Correct use of $props, $derived.by(), onclick event handler, and public env var.">

```svelte
<script lang="ts">
    import { PUBLIC_API_ENDPOINT } from '$env/static/public'; // Correct env var import
    // Assumes User type is defined elsewhere and imported with `import type`
    interface User {
        name: string;
        age: number;
        isActive: boolean;
    }

    const { user }: { user: User | null } = $props();

    /**
     * Generates a greeting message based on the user's status.
     */
    let greeting = $derived.by(() => {
        if (!user) return 'Hello, guest!';

        let baseGreeting = `Hello, ${user.name}! You are using endpoint: ${PUBLIC_API_ENDPOINT}`;
        if (user.isActive) {
            return `${baseGreeting} Welcome back.`;
        }
        return `${baseGreeting} Please activate your account.`;
    });

    let count = $state(0);
    function increment() {
        count++;
    }
</script>

<p>{greeting}</p>
<button onclick={increment}>Count is {count}</button>
<!-- This is an HTML-style comment in the template -->
```

</example>

<example type="invalid" description="Incorrect use of $derived, legacy event handler, and process.env in component.">

```svelte
<script lang="ts">
    let count = $state(0);

    // BAD: Complex logic directly in $derived(...)
    let message = $derived(() => {
        if (count > 5) {
            return "Count is large";
        }
        // BAD: Accessing process.env directly in component
        // return `Count is small on ${process.env.PUBLIC_ENDPOINT}`;
        return "Count is small";
    });

    function handleClick() {
        // ...
    }

</script>

<p>{message}</p>
<button on:click={handleClick}>Legacy Click</button> {/* BAD: on:click */}
{/* BAD SVELTE COMMENT: This style is disallowed */}
```

</example>

<example description="Correct use of $effect for logging (use $inspect for debugging state)">

```svelte
<script lang="ts">
    let count = $state(0);

    // For debugging reactive changes, $inspect is preferred:
    $inspect(count).with('Current count');

    // If $effect is used for other side effects (e.g., imperative DOM):
    $effect(() => {
        // Example: document.title = `Count: ${count}`;
        // Avoid console.log for simple state tracking here; use $inspect.
        // If logging for other reasons (e.g., specific event, complex calculation result):
        // console.log("Effect ran, count is:", count); // Use judiciously
    });

    function increment() {
        count++;
    }
</script>

<button onclick={increment}>Increment</button>
```

</example>
