---
description: Guide Svelte 5 component development with DaisyUI within src/routes/(layout)/, emphasizing runes, best practices, accessibility, and .js imports.
globs: **/*.svelte
tags: [svelte, svelte5, daisyui, tailwind, components, ui, ux, accessibility]
priority: 2
version: 1.1.0
alwaysApply: false
---

# Svelte 5 and DaisyUI Component Standards

## Context

- This rule provides specific guidelines for developing Svelte 5 components that integrate DaisyUI and Tailwind CSS, building upon general Svelte 5 runes best practices.
- **Component Location:** UI components, their stories, and component-specific tests should primarily be located within appropriate subdirectories of `src/routes/(layout)/` (e.g., `src/routes/(layout)/components/`, `src/routes/(layout)/stories/`, `src/routes/(layout)/components/__tests__/`). Truly global, application-agnostic UI utilities or base components might reside in `$lib`, but the default should be co-location within `src/routes/(layout)/`.
- **Import Convention**: For internal project imports (e.g., from `$lib/...` or relative paths like `./...`), append `.js` to the import path (e.g., `import { myFunction } from '$lib/utils/myUtils.js';`, `import { GET } from './+server.js';`).
- Apply when creating or modifying Svelte components intended to use DaisyUI's component library and styling conventions, particularly those within the `src/routes/(layout)/` structure.
- Focus on maintaining accessibility, performance, modern UI/UX, and consistency with DaisyUI's theming.
- **Note:** For comprehensive Svelte 5 runes usage, TypeScript standards, event handlers, and commenting, refer to `svelte-runes-standards.mdc` and `typescript-typing-standards.mdc`.

## Requirements

### Component File Structure

- **Source Files:** Place Svelte component files (e.g., `MyButton.svelte`) in a dedicated subdirectory like `src/routes/(layout)/components/your-feature/`.
- **Stories:** Storybook files (e.g., `MyButton.story.svelte` or `MyButton.stories.ts`) should be co-located, perhaps in `src/routes/(layout)/stories/your-feature/` or alongside components if preferred.
- **Unit Tests:** Vitest unit tests (e.g., `MyButton.test.ts`) should also be co-located, for example, in `src/routes/(layout)/components/your-feature/__tests__/MyButton.test.ts` or directly alongside the component.

### Svelte 5 Runes & General Practices

- Adhere to all guidelines in `svelte-runes-standards.mdc`. This includes:
    - Props declaration with `$props()` and strong typing (see `typescript-typing-standards.mdc`).
    - Props are declared like `let { name, user, ...etc }: <PropTypes> = $props()`
    - State management with `$state()`.
    - Derived state with `$derived()` for simple expressions and `$derived.by()` for complex logic.
    - Side effects with `$effect()`.
    - **Event Handlers**: Use the lowercase, colon-less syntax (e.g., `onclick={handler}`).
    - **Commenting**:
        - Script: JSDoc (`/** ... */`) or dedicated line `//` comments.
        - Template: HTML-style comments (`<!-- ... -->`).
        - Avoid `{/* ... */}` comments.
- Leverage Svelte 5's snippet pattern for component composition where appropriate.

### DaisyUI Components & Theming

- **Prefer DaisyUI:** Utilize DaisyUI components (e.g., `btn`, `card`, `modal`) over custom styling where available and appropriate for the desired UI.
- **Theming:** Strictly follow DaisyUI's theming system.
    - Use DaisyUI theme variables (e.g., `bg-primary`, `text-base-content`, `border-neutral`) for colors and styling.
    - Avoid hardcoding color values. If custom colors are needed, they should be defined as part of a custom DaisyUI theme extension.
- **Responsiveness:** Apply responsive design using Tailwind CSS breakpoint utilities (e.g., `md:flex`, `lg:text-xl`) in conjunction with DaisyUI components.
- **Spacing:** Use Tailwind's spacing utilities (e.g., `p-4`, `m-2`, `space-y-2`) for consistent padding, margins, and layout spacing.

### Accessibility (A11y)

- **Semantic HTML:** Use appropriate HTML5 elements (e.g., `<nav>`, `<button>`, `<article>`) for their semantic meaning.
- **ARIA Attributes:** Include ARIA (Accessible Rich Internet Applications) attributes (e.g., `aria-label`, `aria-hidden`, `role`) where necessary to enhance accessibility, especially for custom or complex components.
- **Keyboard Navigation:** Ensure all interactive elements are focusable and operable via keyboard.
- **Focus Management:** Implement logical focus order and manage focus for dynamic elements like modals and dropdowns.
- **Labels & Alt Text:** Provide clear labels for form controls and descriptive alt text for images.
- **Contrast:** Adhere to WCAG contrast guidelines by using DaisyUI's color system appropriately.

### Performance

- Follow general Svelte performance best practices (see `svelte-runes-standards.mdc`).
- Use `{#key}` blocks for list rendering to ensure efficient updates.
- Consider lazy loading for components or images that are off-screen or not immediately needed.

### Testing

- **Unit Tests (Vitest):** Write unit tests for component logic, ideally co-located with the component (e.g., in a `__tests__` subdirectory or alongside it in `src/routes/(layout)/components/your-feature/`).
- **E2E Tests (Playwright):** Create end-to-end tests for critical user flows involving new UI components or features. These tests will typically reside in the project\'s main `e2e` directory.
- **Storybook Stories:** Develop Storybook stories for UI components. Store these alongside the components or in a parallel structure (e.g., `src/routes/(layout)/stories/your-feature/YourComponent.story.svelte`). This allows for isolated development, visual testing, and documentation.

## Examples

<example description="Proper use of Svelte 5 runes with DaisyUI, assuming component is in src/routes/(layout)/components/">

```svelte
<script lang="ts">
    // Assumes SomeItemType is defined, e.g., in a shared types file like $lib/types/index.ts
    // or co-located with route-specific types.
    import type { SomeItemType } from '$lib/types.js'; // Note .js, or a more specific path if type is route-specific

    const {
        items = [] as SomeItemType[],
        title,
        initialCount = 0
    }: {
        items?: SomeItemType[];
        title: string;
        initialCount?: number;
    } = $props();

    let count = $state(initialCount);

    let filteredItems = $derived.by(() => {
        if (!items) return [];
        return items.filter((item) => item.name.length > count);
    });

    $effect(() => {
        // console.log(`Effect: Filtered items count changed to ${filteredItems.length} based on count ${count}`);
    });

    function increment() {
        count++;
    }
</script>

<div class="card bg-base-100 w-full max-w-md shadow-xl">
    <div class="card-body">
        <h2 class="card-title text-accent">{title}</h2>
        <p>Current count: {count}</p>
        {#if items && items.length > 0}
            <ul class="mt-2 mb-4 list-disc pl-5">
                {#each filteredItems as item (item.id)}
                    <li class="py-1">{item.name}</li>
                {/each}
            </ul>
        {:else}
            <p class="text-base-content/70 italic">No items to display.</p>
        {/if}
        <div class="card-actions justify-end">
            <button class="btn btn-primary" onclick={increment} aria-label="Increment filter count">
                Increment Count ({count})
            </button>
        </div>
    </div>
</div>
```

</example>

<example type="invalid" description="Incorrect use of $derived for potentially complex filter (should use $derived.by()) and legacy event handler">

```svelte
<script lang="ts">
  interface Item { id: string; name: string; }
  let items = $state<Item[]>([{name: 'short', id: '1'}, {name: 'loooong', id: '2'}]);
  let threshold = $state(5);

  // BAD: Potentially problematic if filter logic becomes complex.
  let longItems = $derived(items.filter(item => item.name.length > threshold));

  function doSomething() { /* ... */ }

</script>
<p>Long items: {longItems.length}</p>
<button on:click={doSomething}>Do Something</button> {/* BAD: on:click should be onclick */}
{/* BAD SVELTE COMMENT: This style is disallowed in templates */}
```

</example>

<example description="Using DaisyUI theme variables for a button">

```svelte
<button class="btn btn-secondary hover:btn-accent focus:ring-secondary-focus focus:ring-2">
    Themed Button
</button>
```

</example>

<example type="invalid" description="Hard-coding styles instead of using DaisyUI classes or theme variables">

```svelte
<!-- Manually styled button, less maintainable and inconsistent with DaisyUI -->
<button style="background-color: #FF00FF; color: white; padding: 10px 20px; border-radius: 5px;">
    Styled Manually
</button>
```

</example>
