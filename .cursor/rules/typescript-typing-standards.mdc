---
description: Enforce consistent and type-safe TypeScript usage across the codebase
globs: **/*.ts, **/*.tsx
tags: [typescript, typing, best-practices, style-guide]
priority: 3
version: 1.0.0
---

# TypeScript Typing Standards

## Context

- This rule defines general TypeScript typing best practices to ensure code clarity, maintainability, and type safety throughout the project.
- Apply this rule when writing or reviewing any TypeScript (`.ts`) or TSX (`.tsx`) files.

## Requirements

- **Avoid `any`:**
    - Do not use `any` as a type unless absolutely necessary and all other options (like generics, `unknown`, or more specific types) have been considered.
    - If `any` must be used, provide a comment explaining why.
- **Prefer `unknown` over `any`:** When a type is truly unknown or could be anything, use `unknown` instead of `any`. This forces type checking or assertion before the value can be used, enhancing type safety.
- **Specific Return Types:** Functions should have explicit and specific return types. Avoid implicit `any` returns or overly broad types like `object` if a more precise type can be defined.
- **Clear Interfaces and Types:**
    - Define clear `interface` or `type` aliases for all custom data structures, objects, and function signatures.
    - Prefer interfaces for object shapes that might be extended or implemented. Use type aliases for unions, intersections, primitives, or more complex types.
- **Type-Only Imports:** When importing types or interfaces, use type-only imports if your TypeScript configuration (`verbatimModuleSyntax` in `tsconfig.json`) requires or benefits from it (e.g., `import type { MyType } from './my-module';`). This can also be a good general practice for clarity.
- **Utility Types:** Utilize TypeScript's built-in utility types (e.g., `Partial<T>`, `Readonly<T>`, `Pick<T, K>`, `Omit<T, K>`, `Record<K, T>`) where appropriate to create new types based on existing ones concisely.

## Examples

<example description="Preferring unknown over any">

```typescript
// Good: Using unknown for a truly variable input
function processData(input: unknown) {
    if (typeof input === 'string') {
        console.log(input.toUpperCase());
    } else if (typeof input === 'number') {
        console.log(input.toFixed(2));
    }
    // ... other checks
}

// Bad: Using any, losing type safety
// function processData(input: any) {
// console.log(input.toUpperCase()); // Potential runtime error if input is not a string
// }
```

</example>

<example description=" Specific function return types">

```typescript
interface UserProfile {
    id: string;
    name: string;
    email?: string;
}

// Good: Specific return type
function getUserProfile(userId: string): UserProfile | null {
    // ... logic to fetch user
    if (userId === '1') return { id: '1', name: 'Alice' };
    return null;
}

// Bad: Vague return type
// function getUserProfile(userId: string): object | null { /_ ... _/ }
// Bad: Implicit any return type
// function getUserProfile(userId: string) { /_ ... _/ }
```

</example>

<example description="Type-only imports">

```typescript
// Good: Using type-only import for an interface
import type { User } from './user-model';

function displayUser(user: User) {
    console.log(user.name);
}
```

</example>

<example type="invalid" description="Unnecessary use of any">

```typescript
// Bad: Defaulting to 'any'
// let myVariable: any;
// let anotherVariable; // Implicit any

// Better alternatives:
let myVariable: unknown;
let specificVariable: string | number;
const inferredVariable = 'hello'; // Type string is inferred
```

</example>
