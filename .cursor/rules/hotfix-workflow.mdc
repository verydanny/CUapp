---
description: Guides user through hotfix implementation with Changesets
# globs: src/**/*, .changeset/*
tags: [workflow, hotfix, changeset, git, patch, production]
priority: 1
version: 1.0.0
alwaysApply: false
---

# Hotfix Workflow

## Context

- This rule guides the AI and user through the process of implementing a critical bugfix directly affecting production (a hotfix) and correctly incorporating Changeset for versioning.
- Hotfixes are branched from the production release branch and merged back into both the production and main development branches.
- Apply this rule when a user indicates they are working on an urgent fix for a production issue.

## Requirements

- **Sync:** Instruct the user to pull the latest changes from `main` and the production release branch (e.g., often `main` itself, but could be a `release/*` branch).
- **Branch:** Guide the user to create and checkout a new hotfix branch _from the production release branch_ following a consistent naming convention (e.g., `hotfix/<issue-description>`).
- **Implement:** Acknowledge the hotfix implementation phase (AI should assist with coding as requested separately). Focus on fixing only the critical issue.
- **Add Changeset:** The AI will run `bun x changeset`. This command is interactive.
    - The AI should guide the user through the terminal prompts.
    - The AI _must_ suggest a `patch` version bump, as hotfixes are always patch releases in semantic versioning.
    - The user will need to interact with the terminal prompt to confirm the selection and add a summary.
- **Commit:** The AI will stage all relevant changes (including the `.changeset` file) and create a descriptive commit message following Conventional Commits (e.g., `fix(hotfix): brief description of critical fix`).
    - The AI will write the commit message to a temporary file (e.g., `.git/COMMIT_EDITMSG`) using `echo -e` with `\n` for newlines.
    - The AI will then create the commit using `git commit -F .git/COMMIT_EDITMSG`.
- **Push:** The AI will push the hotfix branch to the remote repository.
- **PR:** Instruct the user to open a pull request for the hotfix branch, targeting the _production release branch_.
- **Merge and Tag:** After review, the hotfix PR should be merged into the production release branch. A tag should be created for the new version.
- **Integrate:** The changes from the hotfix (including the version bump and changeset) _must_ be merged back into the main development branch (`main` or `develop`) to prevent the bug from reappearing in future releases. The AI should remind the user of this step.
- Ensure the AI initiates `bun x changeset`, provides guidance (strictly suggesting 'patch'), handles staging/committing, pushes the branch, and reminds the user about the merge-back step.

## Examples

<example>
  description: AI initiates changeset and suggests patch bump for hotfix
  ```
Okay, you've finished implementing the hotfix. I will now run `bun x changeset` for you. Since this is a hotfix for production, it *must* be a `patch` change. Please follow the prompts in the terminal to confirm and add a summary.
  ```
</example>

<example type="invalid">\
 description: AI suggests minor or major bump for a hotfix

```
Okay, I'm running bun x changeset. What kind of change is this?
```

</example>
<example>
  description: AI stages and commits hotfix changes
  ```
Okay, I have staged all the relevant changes for the hotfix. I will now create the commit.
  ```
</example>
<example>
  description: AI reminds user to merge hotfix back to development branch
  ```
Remember to merge this hotfix branch back into the main development branch (main) after it's merged into production to ensure the fix is included in future releases.
  ```
</example>
