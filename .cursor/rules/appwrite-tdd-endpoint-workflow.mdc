---
description: Guide TDD of SvelteKit API endpoints using Appwrite utility functions to ensure robust and well-tested API layers.
globs: src/routes/api/**/+server.ts, src/routes/api/**/server.test.ts
tags: [svelte, sveltekit, appwrite, tdd, api, testing, vitest]
priority: 2
version: 1.3.0 # Updated version
alwaysApply: false
---

# SvelteKit Appwrite TDD Endpoint Workflow

## Context

This rule guides the AI and user through creating SvelteKit API endpoints that leverage Appwrite utility functions, following a Test-Driven Development (TDD) approach. The goal is to ensure that API endpoint logic (request handling, validation, calling services, response formatting) is thoroughly tested and reliable.

This workflow assumes:

- An Appwrite data model is already defined in `.appwrite/appwrite.json` and documented.
- Corresponding Appwrite utility functions (CRUD operations) for that model exist in `src/lib/server/appwrite-utils/<model>.appwrite.ts`. These functions accept an initialized Appwrite service client (e.g., `Databases`) as an argument.
- Unit tests for these utility functions are present and pass, as per `appwrite-testing-workflow.mdc`.
- A centralized Appwrite client setup exists in `src/lib/server/appwrite-utils/appwrite.ts`, exporting factory functions like `createAdminClient()`.

This rule should be applied when creating or modifying SvelteKit API endpoints (`+server.ts` files) that interact with an Appwrite backend.

## Requirements

The development process follows the Red-Green-Refactor cycle of TDD:

### 1. Setup & Pre-requisites

- Ensure `feature-workflow.mdc` is active for branch creation, changesets, etc.
- Confirm model, utility functions, and their tests are in place.
- API endpoints are in `src/routes/api/your-feature/.../+server.ts`.
- Tests for these endpoints are co-located, e.g., `src/routes/api/your-feature/.../server.test.ts` (or `<feature_name>.test.ts` if preferred, but directly alongside `+server.ts`).
- **Import Convention**: For internal project imports (e.g., from `$lib/...` or relative paths like `./...`), append `.js` to the import path (e.g., `import { myFunction } from '$lib/utils/myUtils.js';`, `import { GET } from './+server.js';`).

### 2. Write Failing API Test (Red Phase)

- For each API operation, first write a failing test in the `server.test.ts` file.
- **Mocking Dependencies:**
    - **Appwrite Utility Functions:** Mock the specific Appwrite utility functions (e.g., `createYourModelItem`) from `src/lib/server/appwrite-utils/<model>.appwrite.js` (note the `.js`) that your endpoint handler will call. Use `vi.mock()` at the top level of the test file.
        - **Important for Mocks within `vi.mock` factory**: If you define a mock variable (e.g., `const myMock = vi.fn()`) and then use that variable inside the `vi.mock` factory function, you **must** use `vi.hoisted()` to define the variable. Example: `const myMock = vi.hoisted(() => vi.fn());`. This ensures the mock is initialized before the factory runs.
        - Example:
            ```typescript
            const mockCreateYourModelItem = vi.hoisted(() => vi.fn());
            vi.mock('$lib/server/appwrite-utils/your-model.appwrite.js', () => ({
                // Note .js
                createYourModelItem: mockCreateYourModelItem
            }));
            ```
    - **RequestEvent:** Construct a `RequestEvent` mock with `request`, `params`, `url`, and `locals`.
- **Assertions:**
    - Test for success (status codes, JSON body, headers) and errors (invalid input, not found, server errors from mocked utility).
    - Verify the mocked Appwrite utility function was called with expected arguments.

### 3. Implement Endpoint Handler (Green Phase)

- In `+server.ts`, implement the API handler (e.g., `export async function POST(event: RequestEvent) { ... }`).
- **Handler Logic:**
    - **Initialize Appwrite Service:** Import `createAdminClient` (or other relevant client factory) from `src/lib/server/appwrite-utils/appwrite.js`. Call it to get an Appwrite client instance, then get the required service (e.g., `const adminClient = createAdminClient(); const databases = adminClient.databases;`).
    - Parse and validate the request body.
    - Extract path parameters.
    - Call the (real) Appwrite utility function, passing the obtained Appwrite service (e.g., `databases`) and the data: `await createYourModelItem(databases, data);`.
    - Handle errors and return appropriate HTTP responses using `json()` from `@sveltejs/kit`.
- Write code until tests pass.

### 4. Refactor (Refactor Phase)

- Refactor endpoint and test code for clarity and efficiency.
- Adhere to `typescript-typing-standards.mdc`.

### 5. Environment Variables

- API endpoint handlers obtain Appwrite services via `createAdminClient()` from `src/lib/server/appwrite-utils/appwrite.js`. This central utility is responsible for using environment variables from `$env/static/private` and `$env/static/public` correctly, as per `appwrite-rules.mdc`.
- API endpoint tests mock the higher-level Appwrite utility functions (e.g., `createYourModelItem`), so they don't need to mock `createAdminClient` or `$env/static/private` directly.

## Examples

<example description="Failing test for a POST endpoint to create a 'widget'">

```typescript
// src/routes/api/widgets/server.test.ts
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { POST } from './+server.js'; // Note .js
import type { RequestEvent } from '@sveltejs/kit';
import type { CreateWidgetData } from '$lib/server/appwrite-utils/widgets.appwrite.js'; // Note .js

// Mock the specific Appwrite utility function that the POST handler will call
// Use vi.hoisted() because mockCreateWidgetInAppwrite is used in the vi.mock factory
const mockCreateWidgetInAppwrite = vi.hoisted(() => vi.fn());
vi.mock('$lib/server/appwrite-utils/widgets.appwrite.js', () => ({
    // Note .js
    createWidgetInAppwrite: mockCreateWidgetInAppwrite
}));

describe('POST /api/widgets', () => {
    beforeEach(() => {
        vi.clearAllMocks();
    });

    it('should create a widget and return 201 on success', async () => {
        const widgetData: CreateWidgetData = { name: 'Test Widget', color: 'blue' };
        const mockAppwriteDocument = { $id: 'new-widget-id', ...widgetData };

        mockCreateWidgetInAppwrite.mockResolvedValue(mockAppwriteDocument);

        const mockRequest = new Request('http://localhost/api/widgets', {
            method: 'POST',
            body: JSON.stringify(widgetData),
            headers: { 'Content-Type': 'application/json' }
        });

        const event = {
            request: mockRequest,
            params: {},
            url: new URL('http://localhost/api/widgets'),
            locals: {}
        } as unknown as RequestEvent;

        const response = await POST(event);
        const body = await response.json();

        expect(response.status).toBe(201);
        expect(body).toEqual(mockAppwriteDocument);
        expect(mockCreateWidgetInAppwrite).toHaveBeenCalledWith(expect.anything(), widgetData);
    });

    // ... other tests for 400, 500 errors ...
});
```

</example>

<example description="Implementation of the POST endpoint handler for widgets">

```typescript
// src/routes/api/widgets/+server.ts
import { json } from '@sveltejs/kit';
import type { RequestEvent } from '@sveltejs/kit';
import { createAdminClient } from '$lib/server/appwrite-utils/appwrite.js'; // Note .js
import { createWidgetInAppwrite } from '$lib/server/appwrite-utils/widgets.appwrite.js'; // Note .js
import type { CreateWidgetData } from '$lib/server/appwrite-utils/widgets.appwrite.js'; // Note .js

export async function POST(event: RequestEvent) {
    const adminClient = createAdminClient();
    const databases = adminClient.databases;

    try {
        const data = (await event.request.json()) as CreateWidgetData;

        if (!data.name || typeof data.name !== 'string') {
            return json({ error: 'Name is required' }, { status: 400 });
        }

        const newWidgetDocument = await createWidgetInAppwrite(databases, data);
        return json(newWidgetDocument, { status: 201 });
    } catch (error: any) {
        if (error instanceof SyntaxError) {
            return json({ error: 'Invalid JSON' }, { status: 400 });
        }
        console.error('Error creating widget:', error);
        return json(
            { error: 'Failed to create widget', details: error.message || 'Unknown error' },
            { status: 500 }
        );
    }
}
```

</example>
